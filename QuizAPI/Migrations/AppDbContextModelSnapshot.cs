// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAPI.Data;

#nullable disable

namespace QuizAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAPI.Model.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int?>("BootcamperId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MentorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("BootcamperId")
                        .IsUnique()
                        .HasFilter("[BootcamperId] IS NOT NULL");

                    b.HasIndex("MentorId")
                        .IsUnique()
                        .HasFilter("[MentorId] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("QuizAPI.Model.Bootcamper", b =>
                {
                    b.Property<int>("BootcamperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BootcamperId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BootcamperId");

                    b.ToTable("Bootcampers");
                });

            modelBuilder.Entity("QuizAPI.Model.BootcamperQuiz", b =>
                {
                    b.Property<int>("BootcamperId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("BootcamperId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("BootcamperQuizzes");
                });

            modelBuilder.Entity("QuizAPI.Model.Mentor", b =>
                {
                    b.Property<int>("MentorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MentorId"));

                    b.Property<string>("MentorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MentorId");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("QuizAPI.Model.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Choices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("QuizAPI.Model.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.HasIndex("MentorId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Model.Account", b =>
                {
                    b.HasOne("QuizAPI.Model.Bootcamper", "Bootcamper")
                        .WithOne("Account")
                        .HasForeignKey("QuizAPI.Model.Account", "BootcamperId");

                    b.HasOne("QuizAPI.Model.Mentor", "Mentor")
                        .WithOne("Account")
                        .HasForeignKey("QuizAPI.Model.Account", "MentorId");

                    b.Navigation("Bootcamper");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("QuizAPI.Model.BootcamperQuiz", b =>
                {
                    b.HasOne("QuizAPI.Model.Bootcamper", "Bootcampers")
                        .WithMany("BootcamperQuizzes")
                        .HasForeignKey("BootcamperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizAPI.Model.Quiz", "Quizzes")
                        .WithMany("BootcamperQuizzes")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bootcampers");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Model.Question", b =>
                {
                    b.HasOne("QuizAPI.Model.Quiz", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuizId");
                });

            modelBuilder.Entity("QuizAPI.Model.Quiz", b =>
                {
                    b.HasOne("QuizAPI.Model.Mentor", "Mentor")
                        .WithMany("Quizzes")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("QuizAPI.Model.Bootcamper", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("BootcamperQuizzes");
                });

            modelBuilder.Entity("QuizAPI.Model.Mentor", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("QuizAPI.Model.Quiz", b =>
                {
                    b.Navigation("BootcamperQuizzes");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
